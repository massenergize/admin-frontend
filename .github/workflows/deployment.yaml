name: Build and Deploy to Netlify CI/CD
on:
  push:
    branches:
      - development
      - master
      - canary
      - setup-better-ci-cd
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
    environment:
      name: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: |
          npm i --legacy-peer-deps

      - name: Get and bump BUILD_VERSION
        run: |
            # Retrieve the entire JSON object from config.json
            CONFIG_JSON=$(cat app/config/config.json)
            # Extract the BUILD_VERSION field from the JSON object and parse it as an integer
            BUILD_VERSION=$(echo $CONFIG_JSON | jq -r '.BUILD_VERSION | tonumber')
            # Bump up the BUILD_VERSION
            NEXT_VERSION=$((BUILD_VERSION + 1))
            # Update the BUILD_VERSION field in the JSON object
            UPDATED_CONFIG_JSON=$(echo $CONFIG_JSON | jq --argjson next_version $NEXT_VERSION '.BUILD_VERSION = $next_version')
            # Write the updated JSON object back to config.json
            echo $UPDATED_CONFIG_JSON > app/config/config.json
            # Commit the changes
            git config --global user.email "me-bot@massenergize.org"
            git config --global user.name "Version Update Bot"
            git add app/config/config.json
            git commit -m "Bump BUILD_VERSION to $NEXT_VERSION"
            git push

      - name: Create and push tag
        run: |
          git tag -a "v$NEXT_VERSION" -m "Version $NEXT_VERSION"
          git push origin "v$NEXT_VERSION"

      - name: Deploy to Netlify
        if: github.ref_type == 'tag'
        uses: data-intuitive/netlify-deploy-site@v1
        with:
          auth: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          dir: 'build'
          site: ${{ secrets.NETLIFY_PROD_SITE_ID }}
          prod: true
          message: 'Deploying ${{ github.ref }}'

      - name: Report status to Slack
        if: always()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          MESSAGE="Workflow *${{ github.ref }}* has completed with status: *${{ job.status }}*"
          PAYLOAD="{\"text\": \"$MESSAGE\"}"
          curl -X POST -H 'Content-type: application/json' --data "$PAYLOAD" $SLACK_WEBHOOK_URL
